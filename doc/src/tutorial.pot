# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008, 2009, 2010, 2011, 2012 SymPy Development Team
# This file is distributed under the same license as the SymPy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SymPy 0.7.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-03-19 21:43\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../src/tutorial.txt:5
# acb2afa576a345518166bb3c57217833
msgid "Tutorial"
msgstr ""

#: ../../src/tutorial.txt:10
# 5baabfea76c0451eb820e80b7febac52
msgid "Introduction"
msgstr ""

#: ../../src/tutorial.txt:12
# 256d4613c78e46fbb9b76eec0d90c13f
msgid "SymPy is a Python library for symbolic mathematics. It aims to become a full-featured computer algebra system (CAS) while keeping the code as simple as possible in order to be comprehensible and easily extensible.  SymPy is written entirely in Python and does not require any external libraries."
msgstr ""

#: ../../src/tutorial.txt:17
# 99f416537eaa4caeb105763393832fc4
msgid "This tutorial gives an overview and introduction to SymPy. Read this to have an idea what SymPy can do for you (and how) and if you want to know more, read the :ref:`SymPy User's Guide <guide>`, :ref:`SymPy Modules Reference <module-docs>`. or the `sources <https://github.com/sympy/sympy/>`_ directly."
msgstr ""

#: ../../src/tutorial.txt:26
# 84a7cb2d0b284a2f9c22d0a0a346b46e
msgid "First Steps with SymPy"
msgstr ""

#: ../../src/tutorial.txt:28
# 5c43ba2c58c144a19a9033ecf0df33db
msgid "The easiest way to download it is to go to http://code.google.com/p/sympy/ and download the latest tarball from the Featured Downloads:"
msgstr ""

#: ../../src/tutorial.txt:34
# ef2ed50a709b48bfa1b02b340e564281
msgid "Unpack it:"
msgstr ""

#: ../../src/tutorial.txt:40
# 2b7bd9f706ec413fbd7193e39a317e39
msgid "and try it from a Python interpreter:"
msgstr ""

#: ../../src/tutorial.txt:54
# a94bf4c4986242d68bbe0c8bd492fe9d
msgid "You can use SymPy as shown above and this is indeed the recommended way if you use it in your program. You can also install it using ``./setup.py install`` as any other Python module, or just install a package in your favourite Linux distribution, e.g.:"
msgstr ""

#: ../../src/tutorial.txt:80
# db569c3d059a46dbbc862a312b1f2e69
msgid "For other means how to install SymPy, consult the  Downloads_ tab on the SymPy's webpage."
msgstr ""

#: ../../src/tutorial.txt:87
# b6613cfc82394874b3b472dc0035a204
msgid "isympy Console"
msgstr ""

#: ../../src/tutorial.txt:89
# cabd8f1c87e84121b2c53294a91d0fff
msgid "For experimenting with new features, or when figuring out how to do things, you can use our special wrapper around IPython called ``isympy`` (located in ``bin/isympy`` if you are running from the source directory) which is just a standard Python shell that has already imported the relevant SymPy modules and defined the symbols x, y, z and some other things:"
msgstr ""

#: ../../src/tutorial.txt:119
# dd06236a16fb405f8f320e937973995c
msgid "Commands entered by you are bold. Thus what we did in 3 lines in a regular Python interpreter can be done in 1 line in isympy."
msgstr ""

#: ../../src/tutorial.txt:124
# 79bd128425cc425788ebc134eebf53a3
msgid "Using SymPy as a calculator"
msgstr ""

#: ../../src/tutorial.txt:126
# dfe8115d5190405b82fc6cd364f0fc36
msgid "SymPy has three built-in numeric types: Float, Rational and Integer."
msgstr ""

#: ../../src/tutorial.txt:128
# 6c434664bcd84c0db77cc45f7e7db316
msgid "The Rational class represents a rational number as a pair of two Integers: the numerator and the denominator. So Rational(1,2) represents 1/2, Rational(5,2) represents 5/2, and so on."
msgstr ""

#: ../../src/tutorial.txt:147
# 002acad721be4930b26f5a64ec0cf0f9
msgid "Proceed with caution while working with Python int's and floating point numbers, especially in division, since you may create a Python number, not a SymPy number. A ratio of two Python ints may create a float -- the \"true division\" standard of Python 3 and the default behavior of ``isympy`` which imports division from __future__::"
msgstr ""

#: ../../src/tutorial.txt:157
# d68deed1923745968dc0bfd723c0efa0
msgid "But in earlier Python versions where division has not been imported, a truncated int will result::"
msgstr ""

#: ../../src/tutorial.txt:163
# f6a1edaf20e1445f89642eb241a92b64
msgid "In both cases, however, you are not dealing with a SymPy Number because Python created its own number. Most of the time you will probably be working with Rational numbers, so make sure to use Rational to get the SymPy result. One might find it convenient to equate ``R`` and Rational::"
msgstr ""

#: ../../src/tutorial.txt:175
# 3ad2e14a17f149908233527b24567962
msgid "We also have some special constants, like e and pi, that are treated as symbols (1+pi won't evaluate to something numeric, rather it will remain as 1+pi), and have arbitrary precision::"
msgstr ""

#: ../../src/tutorial.txt:189
# 153d98df535b47bd9edf6083360c0551
msgid "as you see, evalf evaluates the expression to a floating-point number"
msgstr ""

#: ../../src/tutorial.txt:191
# afd1a1b9739a4d6dbbb914c0453200a7
msgid "The symbol ``oo`` is used for a class defining mathematical infinity::"
msgstr ""

#: ../../src/tutorial.txt:200
# 334ecf48603f4c189d3ec327ca7d4cc4
msgid "Symbols"
msgstr ""

#: ../../src/tutorial.txt:202
# 203d8c8ba0984ca9bf2e63debce2eb88
msgid "In contrast to other Computer Algebra Systems, in SymPy you have to declare symbolic variables explicitly::"
msgstr ""

#: ../../src/tutorial.txt:209
# 26b815b542f7475b83838528c500f49e
msgid "On the left is the normal Python variable which has been assigned to the SymPy Symbol class. Predefined symbols (including those for symbols with Greek names) are available for import from abc:"
msgstr ""

#: ../../src/tutorial.txt:215
# 6bba571e2ea1447fa12afbbee7f54321
msgid "Symbols can also be created with the ``symbols`` or ``var`` functions, the latter automatically adding the created symbols to the namespace, and both accepting a range notation:"
msgstr ""

#: ../../src/tutorial.txt:227
# 3700a3b5afc946c3affd750951b270bc
msgid "Instances of the Symbol class \"play well together\" and are the building blocks of expresions::"
msgstr ""

#: ../../src/tutorial.txt:239
# fe0f13bf02244b3b9a661b1dc7c6170b
msgid "They can be substituted with other numbers, symbols or expressions using ``subs(old, new)``::"
msgstr ""

#: ../../src/tutorial.txt:250
# aa339bf69f064cddaf336848621cf721
msgid "For the remainder of the tutorial, we assume that we have run::"
msgstr ""

#: ../../src/tutorial.txt:255
# 178eaff4af8749f5ab038038df2dd979
msgid "This will make things look better when printed. See the :ref:`printing-tutorial` section below. If you have a unicode font installed, you can pass use_unicode=True for a slightly nicer output."
msgstr ""

#: ../../src/tutorial.txt:260
# a13f672e86c44a88b7dc25d9b6cc3554
msgid "Algebra"
msgstr ""

#: ../../src/tutorial.txt:262
# bca5a086f8404a3aa9db07cde1c8e2c5
msgid "For partial fraction decomposition, use ``apart(expr, x)``::"
msgstr ""

#: ../../src/tutorial.txt:287
# ecfa869994b54b13bb1a8409e57eb3d1
msgid "To combine things back together, use ``together(expr, x)``::"
msgstr ""

#: ../../src/tutorial.txt:309
# 4251bdd8c35749ab941e692003e21419
msgid "Calculus"
msgstr ""

#: ../../src/tutorial.txt:314
# df475b8d7bc64beab057a8f43904199f
msgid "Limits"
msgstr ""

#: ../../src/tutorial.txt:316
# fe99cf124bc847508c6509afda81c8bf
msgid "Limits are easy to use in SymPy, they follow the syntax ``limit(function, variable, point)``, so to compute the limit of f(x) as x -> 0, you would issue ``limit(f, x, 0)``::"
msgstr ""

#: ../../src/tutorial.txt:325
# d661002f90504b2ab3e8c5dbd484278f
msgid "you can also calculate the limit at infinity::"
msgstr ""

#: ../../src/tutorial.txt:336
# 780ee445798a42f888e97f5f5b65fc90
msgid "for some non-trivial examples on limits, you can read the test file `test_demidovich.py <https://github.com/sympy/sympy/blob/master/sympy/series/tests/test_demidovich.py>`_"
msgstr ""

#: ../../src/tutorial.txt:343
# 2b0afacfd36c474192de39089d72a1ad
msgid "Differentiation"
msgstr ""

#: ../../src/tutorial.txt:345
# ee1edf8a27214e8885868c1a0766470a
msgid "You can differentiate any SymPy expression using ``diff(func, var)``. Examples::"
msgstr ""

#: ../../src/tutorial.txt:358
# a2bf155b48374e3594bca85a05df6bcf
msgid "You can check, that it is correct by::"
msgstr ""

#: ../../src/tutorial.txt:366
# 2166c7b1c03643798513321c316bf0cb
msgid "Higher derivatives can be calculated using the ``diff(func, var, n)`` method::"
msgstr ""

#: ../../src/tutorial.txt:383
# 379428fb2f94470abe0848f4e92cb247
msgid "Series expansion"
msgstr ""

#: ../../src/tutorial.txt:385
# 28ca52da921c4bf78eeb0c18d1a54471
msgid "Use ``.series(var, point, order)``::"
msgstr ""

#: ../../src/tutorial.txt:400
# a0c071244b61480ba63985c91817b685
msgid "Another simple example::"
msgstr ""

#: ../../src/tutorial.txt:420
# 9c24d99f0b00409eb134ed013b67f4f7
msgid "Integration"
msgstr ""

#: ../../src/tutorial.txt:422
# f7c073ebb0cc44dabf438cf42570b6a5
msgid "SymPy has support for indefinite and definite integration of transcendental elementary and special functions via ``integrate()`` facility, which uses powerful extended Risch-Norman algorithm and some heuristics and pattern matching::"
msgstr ""

#: ../../src/tutorial.txt:430
# e7ecae8925b7460892e7bd2141667f2b
msgid "You can integrate elementary functions::"
msgstr ""

#: ../../src/tutorial.txt:443
# a9e5e0ed9d2247438b19682f1ec6aa03
msgid "Also special functions are handled easily::"
msgstr ""

#: ../../src/tutorial.txt:451
# f96ec839ce31484b8c16c824ac6a4520
msgid "It is possible to compute definite integrals::"
msgstr ""

#: ../../src/tutorial.txt:460
# b0d4b46fe22d41f7a338db6897d3add2
msgid "Also, improper integrals are supported as well::"
msgstr ""

#: ../../src/tutorial.txt:472
# 6321cb7e2fe94a448f6fb27f2e8cd8cb
msgid "Complex numbers"
msgstr ""

#: ../../src/tutorial.txt:474
# 93f451df075443dab1f2867bf168751e
msgid "Besides the imaginary unit, I, which is imaginary, symbols can be created with attributes (e.g. real, positive, complex, etc...) and this will affect how they behave::"
msgstr ""

#: ../../src/tutorial.txt:491
# b09fb8f51af34a348cda062f128d66be
msgid "Functions"
msgstr ""

#: ../../src/tutorial.txt:493
# 55de5a5342d4441bbd191529542c96ec
msgid "**trigonometric**::"
msgstr ""

#: ../../src/tutorial.txt:542
# 1bcfeed1b8554a97954663ff538dd316
msgid "**spherical harmonics**::"
msgstr ""

#: ../../src/tutorial.txt:568
# f1e7c5d9b4fe4393a3011b0b56bd8938
msgid "**factorials and gamma function**::"
msgstr ""

#: ../../src/tutorial.txt:586
# 8d0f515273eb4ac9a7b2cc0075e07018
msgid "**zeta function**::"
msgstr ""

#: ../../src/tutorial.txt:611
# 4a2d217964744fe2928a275a18c54dc7
msgid "**polynomials**::"
msgstr ""

#: ../../src/tutorial.txt:650
# aef9c047b3fd498e8e3387291a5a1642
msgid "Differential Equations"
msgstr ""

#: ../../src/tutorial.txt:652
#: ../../src/tutorial.txt:672
# 3fd312fab75a4e0093c08194a273ea89
# dca723333a574cb4a1f564a8e6c54354
msgid "In ``isympy``::"
msgstr ""

#: ../../src/tutorial.txt:670
# c3c7cd30f58d44bc80fbe81fa54436d6
msgid "Algebraic equations"
msgstr ""

#: ../../src/tutorial.txt:685
# 1e6f6baa8df24cf8b0a39515ca464b91
msgid "Linear Algebra"
msgstr ""

#: ../../src/tutorial.txt:690
# ae52076e96b64fdda18bdf97b346aac5
msgid "Matrices"
msgstr ""

#: ../../src/tutorial.txt:692
# e6ebc1773b60428e98b9a7e1a4800b5f
msgid "Matrices are created as instances from the Matrix class::"
msgstr ""

#: ../../src/tutorial.txt:700
# db1deabb15674847b005ce3c4c198cf9
msgid "They can also contain symbols::"
msgstr ""

#: ../../src/tutorial.txt:715
# a3440bf0d51b4596aa888e0f0b810ba6
msgid "For more about Matrices, see the Linear Algebra tutorial."
msgstr ""

#: ../../src/tutorial.txt:720
# 2b8557bf9df44b4c8f06cd7eaf2abaed
msgid "Pattern matching"
msgstr ""

#: ../../src/tutorial.txt:722
# cf238a9950824aff8e528bf76dadd4af
msgid "Use the ``.match()`` method, along with the ``Wild`` class, to perform pattern matching on expressions. The method will return a dictionary with the required substitutions, as follows::"
msgstr ""

#: ../../src/tutorial.txt:736
# b75925954afc46a3b7195e9ee6a89466
msgid "If the match is unsuccessful, it returns ``None``::"
msgstr ""

#: ../../src/tutorial.txt:741
# 0c50b98aa50643089982037b5dda92a5
msgid "One can also use the exclude parameter of the ``Wild`` class to ensure that certain things do not show up in the result::"
msgstr ""

#: ../../src/tutorial.txt:755
# fcc2a34a2f9e43258b4b6090e61fd45f
msgid "Printing"
msgstr ""

#: ../../src/tutorial.txt:757
# ad0c1c0213d141048aadf3b8cf0b3fb4
msgid "There are many ways to print expressions."
msgstr ""

#: ../../src/tutorial.txt:759
# 2603e8ebbba642a797c60a563e0c92ea
msgid "**Standard**"
msgstr ""

#: ../../src/tutorial.txt:761
# 1b73d51478cb4466a7dcda1599489c5d
msgid "This is what ``str(expression)`` returns and it looks like this:"
msgstr ""

#: ../../src/tutorial.txt:772
# 6bd6e11ccb534aeb9a01cb5f67089f88
msgid "**Pretty printing**"
msgstr ""

#: ../../src/tutorial.txt:774
# 67a9df506d4d44e1b897a9a69d726e42
msgid "Nice ascii-art printing is produced by the ``pprint`` function:"
msgstr ""

#: ../../src/tutorial.txt:793
# efdfdfe2a5a84737ad2be06fb637b762
msgid "If you have a unicode font installed, the ``pprint`` function will use it by default. You can override this using the ``use_unicode`` option.:"
msgstr ""

#: ../../src/tutorial.txt:803
# cd4ba698122b445885fe984528f5e3c6
msgid "See also the wiki `Pretty Printing <https://github.com/sympy/sympy/wiki/Pretty-Printing>`_ for more examples of a nice unicode printing."
msgstr ""

#: ../../src/tutorial.txt:807
# 02454b004b47443385015dda6669e772
msgid "Tip: To make pretty printing the default in the Python interpreter, use::"
msgstr ""

#: ../../src/tutorial.txt:830
# e0f14bff30fd409392c23d90d2743c62
msgid "**Python printing**"
msgstr ""

#: ../../src/tutorial.txt:846
# c367d0cba00d478ea14ad5063c44c1b5
msgid "**LaTeX printing**"
msgstr ""

#: ../../src/tutorial.txt:863
# f9b7187cdf73434f8f3033256f82c8b0
msgid "**MathML**"
msgstr ""

#: ../../src/tutorial.txt:875
# 8dc85b3552904d33b475538aaa6d4153
msgid "**Pyglet**"
msgstr ""

#: ../../src/tutorial.txt:881
# b70b6fac5c2a4d7a939b4be502201f3a
msgid "If pyglet is installed, a pyglet window will open containing the LaTeX rendered expression:"
msgstr ""

#: ../../src/tutorial.txt:887
# f8a7f4109a6c46318ae89b2cbaa56e16
msgid "Notes"
msgstr ""

#: ../../src/tutorial.txt:889
# 3efcd7fa91b749148d3d37fa4761e2cc
msgid "``isympy`` calls ``pprint`` automatically, so that's why you see pretty printing by default."
msgstr ""

#: ../../src/tutorial.txt:892
# c30de4cd602145e48e54d06851d4de4d
msgid "Note that there is also a printing module available, ``sympy.printing``.  Other printing methods available through this module are:"
msgstr ""

#: ../../src/tutorial.txt:895
# 66c0aafbfb39429db4b9ce7c22851803
msgid "``pretty(expr)``, ``pretty_print(expr)``, ``pprint(expr)``: Return or print, respectively, a pretty representation of ``expr``. This is the same as the second level of representation described above."
msgstr ""

#: ../../src/tutorial.txt:897
# d07f7e29d1ed4f4c888519b2875cf691
msgid "``latex(expr)``, ``print_latex(expr)``: Return or print, respectively, a `LaTeX <http://www.latex-project.org/>`_  representation of ``expr``"
msgstr ""

#: ../../src/tutorial.txt:899
# 91d84d2b6e8a49fc8f4de6df309e7138
msgid "``mathml(expr)``, ``print_mathml(expr)``: Return or print, respectively, a `MathML <http://www.w3.org/Math/>`_ representation of ``expr``."
msgstr ""

#: ../../src/tutorial.txt:901
# 7ae735209d6f4ba085acf12bf2a615ff
msgid "``print_gtk(expr)``: Print ``expr`` to `Gtkmathview <http://helm.cs.unibo.it/mml-widget/>`_, a GTK widget that displays MathML code. The `Gtkmathview <http://helm.cs.unibo.it/mml-widget/>`_ program is required."
msgstr ""

#: ../../src/tutorial.txt:904
# 5b9cd01ade724b2a9912a9bdf14e5f3c
msgid "Further documentation"
msgstr ""

#: ../../src/tutorial.txt:906
# 4a80b982956e4d2cb8daa8cd892b851b
msgid "Now it's time to learn more about SymPy. Go through the :ref:`SymPy User's Guide <guide>` and :ref:`SymPy Modules Reference <module-docs>`."
msgstr ""

#: ../../src/tutorial.txt:910
# dd842009c80e472c925015cdbb43abf5
msgid "Be sure to also browse our public `wiki.sympy.org <http://wiki.sympy.org/>`_, that contains a lot of useful examples, tutorials, cookbooks that we and our users contributed, and feel free to edit it."
msgstr ""

#: ../../src/tutorial.txt:915
# 6f81344d40194b1e9626585ad7d61071
msgid "Translations"
msgstr ""

#: ../../src/tutorial.txt:917
# d63477b361e444e5ba1312563eb9f3d3
msgid "This tutorial is also available in other languages:"
msgstr ""

